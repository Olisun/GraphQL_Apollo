{"version":3,"sources":["SpaceXLogo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","Card","style","width","margin","Body","Container","Row","Col","sm","Title","Subtitle","classNames","format","to","variant","borderRadius","MissionKey","textAlign","LAUNCHES_QUERY","gql","Launches","config","num","rps","radius","life","v","tha","alpha","scale","position","color","cross","random","backgroundRepeat","Math","Object","assign","onParticleUpdate","ctx","particle","beginPath","rect","p","x","y","fillStyle","fill","closePath","query","loading","error","data","console","log","launches","map","key","Component","LAUNCH_QUERY","Launch","this","props","match","params","parseInt","variables","launch_year","launch_data_local","details","rocket","rocket_id","rocket_name","rocket_type","links","mission_patch","article_link","Img","src","Text","Table","responsive","bordered","striped","client","ApolloClient","uri","App","SpaceXLogo","alt","display","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1acc7e44.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SpaceXLogo.53959298.png\";","import React, { Component } from 'react';\nimport { Button, Card, Container, Col, Row } from \"react-bootstrap\";\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\n\nexport default function LaunchItem({\n  // Destructuring inside the args to bring in props\n  launch: { flight_number, mission_name, launch_date_local, launch_success }\n}) {\n  return (\n    <div className=\"mb-3 px-0\">\n      <Card style={{ width: '54rem', margin: \"auto\" }}>\n        <Card.Body>\n          <Container>\n            <Row>\n              <Col sm={9}>\n                <Card.Title>{mission_name}</Card.Title>\n                <Card.Subtitle className=\"mb-2 text-muted\">Flight Number: {flight_number}</Card.Subtitle>\n                {/* Using classnames lib to color code launch sucess */}\n                <Card.Subtitle className=\"mb-2 text-muted\">Mission Name: {''}\n                  <span\n                    className={classNames({\n                      'text-success': launch_success,\n                      'text-danger': !launch_success\n                    })}\n                  >\n                    {mission_name}\n                  </span>\n                </Card.Subtitle>\n                <Card.Subtitle className=\"mb-2 text-muted\">\n                  Launch Date:\n                  <Moment format=\"MM-DD-YYYY HH:mm\">\n                    {launch_date_local}\n                  </Moment>\n                </Card.Subtitle>\n              </Col>\n              <Col sm={3}>\n                <Link\n                  to={`/launch/${flight_number}`}\n                  variant=\"info\"\n                  className=\"btn btn-primary\"\n                  style={{ width: \"130px\", borderRadius: \"20px\" }}>\n                  Launch Details\n                </Link>\n              </Col>\n            </Row>\n          </Container>\n        </Card.Body>\n      </Card>\n    </div>\n  )\n}","import React from 'react';\n\nexport default function MissionKey() {\n  return (\n    <div className=\"my-6\" style={{ textAlign: \"center\" }}>\n      <p>\n        <span className=\"px-3 mr-2 bg-success\" /> = Success&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span className=\"px-3 mr-2 bg-danger\" /> = Fail\n      </p>\n    </div>\n  );\n}","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport ParticlesBg from \"particles-bg\";\n\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nclass Launches extends Component {\n  render() {\n    let config = {\n      num: [4, 7],\n      rps: 0.1,\n      radius: [50, 40],\n      life: [1.5, 3],\n      v: [2, 3],\n      tha: [-40, 40],\n      // body: '../SpaceXLogo.png',\n      alpha: [0.6, 0],\n      scale: [.1, 0.4],\n      position: \"all\",\n      color: [\"random\", \"#ff0000\"],\n      cross: \"dead\",\n      // emitter: \"follow\",\n      random: 15,\n      backgroundRepeat: \"repeat\"\n    };\n\n    if (Math.random() > 0.85) {\n      config = Object.assign(config, {\n        onParticleUpdate: (ctx, particle) => {\n          ctx.beginPath();\n          ctx.rect(\n            particle.p.x,\n            particle.p.y,\n            particle.radius * 2,\n            particle.radius * 2\n          );\n          ctx.fillStyle = particle.color;\n          ctx.fill();\n          // ctx.scale({ x: 4, y: 9 });\n          ctx.closePath();\n        }\n      });\n    }\n    return (\n      <Fragment>\n        <div className=\"container\">\n          <h4 style={{ textAlign: \"center\" }}>Launches</h4>\n          <MissionKey style={{ textAlign: \"center\" }} />\n          <Query query={LAUNCHES_QUERY}>\n            {/* Arrow function inside object */}\n            {\n              ({ loading, error, data }) => {\n                if (loading) return <h4>Loading...</h4>\n                if (error) console.log(error)\n\n                console.log(data)\n                return <Fragment>\n                  {\n                    data.launches.map(launch => (\n                      <LaunchItem\n                        key={launch.flight_number}\n                        launch={launch}\n                      />\n                    ))\n                  }\n                  {/* <ParticlesBg type=\"circle\" config={config} bg={true} style={{ backgroundRepeat: \"repeat\" }} /> */}\n                </Fragment>\n              }\n            }\n          </Query>\n        </div>\n      </Fragment>\n    )\n  }\n}\n\nexport default Launches;\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Button, Card, Container, Col, fluid, Image, Row, Table } from \"react-bootstrap\";\nimport Moment from 'react-moment';\n\n\nconst LAUNCH_QUERY = gql`\n  query LaunchOuery($flight_number: Int!) {\n    launch (flight_number: $flight_number){\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      details\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n      links {\n        mission_patch\n        article_link\n      }\n    }\n  }\n`\n\nexport class Launch extends Component {\n  render() {\n    // Getting the matching flight number passed down through props. \n    let { flight_number } = this.props.match.params;\n    // Making sure the browser reads the flight number as a number.\n    flight_number = parseInt(flight_number);\n\n    return (\n      <Fragment>\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n          {/* Arrow function inside object */}\n          {\n            ({ loading, error, data }) => {\n              if (loading) return <h4>Loading...</h4>\n              if (error) console.log(error)\n\n              console.log(data)\n              const {\n                mission_name,\n                launch_year,\n                launch_success,\n                launch_data_local,\n                details,\n                rocket: { rocket_id, rocket_name, rocket_type },\n                links: { mission_patch, article_link }\n              } = data.launch\n              return <div>\n                <Card style={{ width: '36rem', margin: \"auto\" }}>\n                  <Card.Img\n                    variant=\"top\"\n                    src={mission_patch}\n                    style={{ width: '300px', margin: 'auto' }}\n                  />\n                  <Card.Body>\n                    <Card.Title>{mission_name}</Card.Title>\n                    <Card.Text>\n                      <Table responsive bordered striped>\n                        <tbody>\n                          <tr>\n                            <td>Launch Year</td>\n                            <td>-{launch_year}</td>\n                          </tr>\n                          <tr>\n                            <td>Launch Success</td>\n                            <td>{launch_success}</td>\n                          </tr>\n                          <tr>\n                            <td>Time of Launch</td>\n                            <td>\n                              <Moment format=\"MM-DD-YYYY at HH:mm\">\n                                {launch_data_local}\n                              </Moment>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td>Rocket Name</td>\n                            <td>{rocket_name}</td>\n                          </tr>\n                          <tr>\n                            <td>Rocket Type</td>\n                            <td>{rocket_type}</td>\n                          </tr>\n                          <tr>\n                            <td>Rocket ID</td>\n                            <td>{rocket_id}</td>\n                          </tr>\n                          <tr>\n                            <td>Outcome</td>\n                            <td>{details}</td>\n                          </tr>\n                        </tbody>\n                      </Table>\n                    </Card.Text>\n\n                  </Card.Body>\n                </Card>\n              </div>\n            }\n          }\n        </Query>\n      </Fragment>\n    )\n  }\n}\n\nexport default Launch\n","// Node_Mods\nimport React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\n// ApolloProvider works like Redux. Wrap the app component in the provider and pass in the store (state).\nimport { ApolloProvider } from 'react-apollo';\nimport Container from 'react-bootstrap/Container';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\n\n// From App\nimport './App.css';\nimport SpaceXLogo from './SpaceXLogo.png';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\n\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n})\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className=\"App\">\n            <img\n              src={SpaceXLogo}\n              alt=\"SpaceX\"\n              style={{\n                width: 400,\n                display: 'block',\n                margin: 'auto'\n              }}\n            />\n          </div>\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}